
lcd_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000004cc  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011a  0080011a  0000057a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b4  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000961  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003fb  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000201  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f4  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000209  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000625  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000295e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  9e:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
  a6:	89 b1       	in	r24, 0x09	; 9
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
  a8:	99 b1       	in	r25, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
  aa:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND2) );
  ac:	82 fd       	sbrc	r24, 2
  ae:	fb cf       	rjmp	.-10     	; 0xa6 <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
  b0:	4a 9b       	sbis	0x09, 2	; 9
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <wait_until_key_pressed+0xa>
}
  b4:	08 95       	ret

000000b6 <LCD_update_time>:

void LCD_update_time()
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
    unsigned char temp;

    lcd_clrscr();
  ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_clrscr>
    lcd_gotoxy(0,1);                    // Go to first character of second line
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_gotoxy>
    itoa( hours/10 , temp, 10);         // Display the hours digits
  c6:	80 91 09 01 	lds	r24, 0x0109
  ca:	da e0       	ldi	r29, 0x0A	; 10
  cc:	6d 2f       	mov	r22, r29
  ce:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
  d2:	4a e0       	ldi	r20, 0x0A	; 10
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	6c 2f       	mov	r22, r28
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);                     // Nifty way to zero pad single digit numbers
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    itoa( hours%10 , temp, 10);
  ea:	80 91 09 01 	lds	r24, 0x0109
  ee:	6d 2f       	mov	r22, r29
  f0:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
  f4:	89 2f       	mov	r24, r25
  f6:	4a e0       	ldi	r20, 0x0A	; 10
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	6c 2f       	mov	r22, r28
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);
 104:	8c 2f       	mov	r24, r28
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    lcd_puts(":");
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>

    itoa( minutes/10 , temp, 10);       // Display the minutes digits
 114:	80 91 1c 01 	lds	r24, 0x011C
 118:	6d 2f       	mov	r22, r29
 11a:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
 11e:	4a e0       	ldi	r20, 0x0A	; 10
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	6c 2f       	mov	r22, r28
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);
 12c:	8c 2f       	mov	r24, r28
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    itoa( minutes%10 , temp, 10);
 134:	80 91 1c 01 	lds	r24, 0x011C
 138:	6d 2f       	mov	r22, r29
 13a:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
 13e:	89 2f       	mov	r24, r25
 140:	4a e0       	ldi	r20, 0x0A	; 10
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	6c 2f       	mov	r22, r28
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);
 14e:	8c 2f       	mov	r24, r28
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    lcd_puts(":");
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>

    itoa( seconds/10 , temp, 10);       // Display the seconds digits
 15e:	80 91 1b 01 	lds	r24, 0x011B
 162:	6d 2f       	mov	r22, r29
 164:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	6c 2f       	mov	r22, r28
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);
 176:	8c 2f       	mov	r24, r28
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    itoa( seconds%10 , temp, 10);
 17e:	80 91 1b 01 	lds	r24, 0x011B
 182:	6d 2f       	mov	r22, r29
 184:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodqi4>
 188:	89 2f       	mov	r24, r25
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	6c 2f       	mov	r22, r28
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 1f 02 	call	0x43e	; 0x43e <itoa>
    lcd_puts(temp);
 198:	8c 2f       	mov	r24, r28
 19a:	90 e0       	ldi	r25, 0x00	; 0
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
    lcd_puts(":");

    itoa( seconds/10 , temp, 10);       // Display the seconds digits
    lcd_puts(temp);
    itoa( seconds%10 , temp, 10);
    lcd_puts(temp);
 1a0:	0c 94 98 01 	jmp	0x330	; 0x330 <lcd_puts>

000001a4 <__vector_11>:
    for (;;) {                           /* loop forever waiting for interrupts*/
    }
}

ISR(TIMER1_COMPA_vect)      //Interrupt Service Routine
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
        PORTD ^= (1<<7);                //Use xor to toggle the status LED
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 58       	subi	r24, 0x80	; 128
 1ca:	8b b9       	out	0x0b, r24	; 11
        seconds++;
 1cc:	80 91 1b 01 	lds	r24, 0x011B
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
        if(seconds==60)
 1d2:	8c 33       	cpi	r24, 0x3C	; 60
 1d4:	19 f0       	breq	.+6      	; 0x1dc <__vector_11+0x38>
}

ISR(TIMER1_COMPA_vect)      //Interrupt Service Routine
{
        PORTD ^= (1<<7);                //Use xor to toggle the status LED
        seconds++;
 1d6:	80 93 1b 01 	sts	0x011B, r24
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <__vector_11+0x46>
        if(seconds==60)
        {
            seconds = 0;
 1dc:	10 92 1b 01 	sts	0x011B, r1
            minutes++;
 1e0:	80 91 1c 01 	lds	r24, 0x011C
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 1c 01 	sts	0x011C, r24
        }
        if(minutes==60)
 1ea:	80 91 1c 01 	lds	r24, 0x011C
 1ee:	8c 33       	cpi	r24, 0x3C	; 60
 1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_11+0x5c>
        {
            minutes = 0;
 1f2:	10 92 1c 01 	sts	0x011C, r1
            hours++;
 1f6:	80 91 09 01 	lds	r24, 0x0109
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 09 01 	sts	0x0109, r24
        }
        if(hours==13)
 200:	80 91 09 01 	lds	r24, 0x0109
 204:	8d 30       	cpi	r24, 0x0D	; 13
 206:	19 f4       	brne	.+6      	; 0x20e <__vector_11+0x6a>
        {
            hours = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 09 01 	sts	0x0109, r24
        }
        LCD_update_time();
 20e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_update_time>
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 234:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_delay();
 236:	00 c0       	rjmp	.+0      	; 0x238 <toggle_e+0x4>
    lcd_e_low();
 238:	5c 98       	cbi	0x0b, 4	; 11
 23a:	08 95       	ret

0000023c <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 248:	66 23       	and	r22, r22
 24a:	11 f0       	breq	.+4      	; 0x250 <lcd_write+0x14>
       lcd_rs_high();
 24c:	5e 9a       	sbi	0x0b, 6	; 11
 24e:	01 c0       	rjmp	.+2      	; 0x252 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 250:	5e 98       	cbi	0x0b, 6	; 11
    }
    lcd_rw_low();
 252:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 254:	9a b1       	in	r25, 0x0a	; 10
 256:	9f 60       	ori	r25, 0x0F	; 15
 258:	9a b9       	out	0x0a, r25	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 25a:	1b b1       	in	r17, 0x0b	; 11
 25c:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 25e:	98 2f       	mov	r25, r24
 260:	92 95       	swap	r25
 262:	9f 70       	andi	r25, 0x0F	; 15
 264:	91 2b       	or	r25, r17
 266:	9b b9       	out	0x0b, r25	; 11
        lcd_e_toggle();
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	81 2b       	or	r24, r17
 274:	8b b9       	out	0x0b, r24	; 11
        lcd_e_toggle();
 276:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 27a:	1f 60       	ori	r17, 0x0F	; 15
 27c:	1b b9       	out	0x0b, r17	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 288:	5e 98       	cbi	0x0b, 6	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 28a:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
 292:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_delay();        
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_read.constprop.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 296:	89 b1       	in	r24, 0x09	; 9
        lcd_e_low();
 298:	5c 98       	cbi	0x0b, 4	; 11
        
        lcd_e_delay();                       /* Enable 500ns low       */
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_read.constprop.0+0x14>
        
        lcd_e_high();
 29c:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_delay();
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_read.constprop.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 2a0:	99 b1       	in	r25, 0x09	; 9
        lcd_e_low();
 2a2:	5c 98       	cbi	0x0b, 4	; 11
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 2a4:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 2a6:	82 95       	swap	r24
 2a8:	80 7f       	andi	r24, 0xF0	; 240
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 2aa:	89 2b       	or	r24, r25
 2ac:	08 95       	ret

000002ae <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 2ae:	0e 94 44 01 	call	0x288	; 0x288 <lcd_read.constprop.0>
 2b2:	87 fd       	sbrc	r24, 7
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2be:	0c 94 44 01 	jmp	0x288	; 0x288 <lcd_read.constprop.0>

000002c2 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 2c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_waitbusy>
    lcd_write(cmd,0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	8c 2f       	mov	r24, r28
}
 2ce:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 2d0:	0c 94 1e 01 	jmp	0x23c	; 0x23c <lcd_write>

000002d4 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2d4:	cf 93       	push	r28
 2d6:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 2d8:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_waitbusy>
    lcd_write(data,1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8c 2f       	mov	r24, r28
}
 2e0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 2e2:	0c 94 1e 01 	jmp	0x23c	; 0x23c <lcd_write>

000002e6 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2e6:	61 11       	cpse	r22, r1
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2ea:	80 58       	subi	r24, 0x80	; 128
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2ee:	80 54       	subi	r24, 0x40	; 64
 2f0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <lcd_command>

000002f4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2f4:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_waitbusy>
}
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

000002fc <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <lcd_command>

00000302 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <lcd_command>

00000308 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 308:	cf 93       	push	r28
 30a:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 30c:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_waitbusy>
    if (c=='\n')
 310:	ca 30       	cpi	r28, 0x0A	; 10
 312:	49 f4       	brne	.+18     	; 0x326 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 314:	80 34       	cpi	r24, 0x40	; 64
 316:	10 f4       	brcc	.+4      	; 0x31c <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	01 c0       	rjmp	.+2      	; 0x31e <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 31c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 31e:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 320:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 322:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <lcd_command>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 32a:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 32c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <lcd_write>

00000330 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 336:	02 c0       	rjmp	.+4      	; 0x33c <lcd_puts+0xc>
        lcd_putc(c);
 338:	0e 94 84 01 	call	0x308	; 0x308 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 33c:	89 91       	ld	r24, Y+
 33e:	81 11       	cpse	r24, r1
 340:	fb cf       	rjmp	.-10     	; 0x338 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 34e:	02 c0       	rjmp	.+4      	; 0x354 <lcd_puts_p+0xc>
        lcd_putc(c);
 350:	0e 94 84 01 	call	0x308	; 0x308 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 354:	fe 01       	movw	r30, r28
 356:	21 96       	adiw	r28, 0x01	; 1
 358:	84 91       	lpm	r24, Z+
 35a:	81 11       	cpse	r24, r1
 35c:	f9 cf       	rjmp	.-14     	; 0x350 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 36c:	9a b1       	in	r25, 0x0a	; 10
 36e:	9f 60       	ori	r25, 0x0F	; 15
 370:	9a b9       	out	0x0a, r25	; 10
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 372:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 374:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 376:	54 9a       	sbi	0x0a, 4	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 378:	e0 e8       	ldi	r30, 0x80	; 128
 37a:	fe e3       	ldi	r31, 0x3E	; 62
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 380:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 382:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 384:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 388:	e0 e8       	ldi	r30, 0x80	; 128
 38a:	f3 e1       	ldi	r31, 0x13	; 19
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 390:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 394:	c0 e4       	ldi	r28, 0x40	; 64
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	fe 01       	movw	r30, r28
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 39e:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3a2:	fe 01       	movw	r30, r28
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3a8:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 3aa:	0e 94 1a 01 	call	0x234	; 0x234 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ae:	21 97       	sbiw	r28, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3c8:	81 2f       	mov	r24, r17

}/* lcd_init */
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 3d0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <lcd_command>

000003d4 <main>:

int main(void)
{
    
    //Setup the clock
    cli();                              //Disable global interrupts
 3d4:	f8 94       	cli
    TCCR1B |= 1<<CS11 | 1<<CS10;        //Divide by 64
 3d6:	80 91 81 00 	lds	r24, 0x0081
 3da:	83 60       	ori	r24, 0x03	; 3
 3dc:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 15624;                      //Count 15624 cycles for 1 second interrupt
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	9d e3       	ldi	r25, 0x3D	; 61
 3e4:	90 93 89 00 	sts	0x0089, r25
 3e8:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |= 1<<WGM12;                 //Put Timer/Counter1 in CTC mode
 3ec:	80 91 81 00 	lds	r24, 0x0081
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	80 93 81 00 	sts	0x0081, r24
    TIMSK1 |= 1<<OCIE1A;                //enable timer compare interrupt
 3f6:	80 91 6f 00 	lds	r24, 0x006F
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	80 93 6f 00 	sts	0x006F, r24
    sei();                              //Enable global interrupts
 400:	78 94       	sei

    //Setup the I/O for the LED

    DDRD |= (1<<7);                     //Set PortD Pin7 as an output
 402:	57 9a       	sbi	0x0a, 7	; 10
    PORTD |= (1<<7);                    //Set PortD Pin7 high to turn on LED
 404:	5f 9a       	sbi	0x0b, 7	; 11

    DDRD &=~ (1 << PD2);                /* Pin PD2 input              */
 406:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);                /* Pin PD2 pull-up enabled    */
 408:	5a 9a       	sbi	0x0b, 2	; 11

    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_init>
    lcd_clrscr();
 410:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_clrscr>
    lcd_puts("Hello World\n");
 414:	8c e0       	ldi	r24, 0x0C	; 12
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
    lcd_puts(time);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts>
 424:	ff cf       	rjmp	.-2      	; 0x424 <main+0x50>

00000426 <__udivmodqi4>:
 426:	99 1b       	sub	r25, r25
 428:	79 e0       	ldi	r23, 0x09	; 9
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__udivmodqi4_ep>

0000042c <__udivmodqi4_loop>:
 42c:	99 1f       	adc	r25, r25
 42e:	96 17       	cp	r25, r22
 430:	08 f0       	brcs	.+2      	; 0x434 <__udivmodqi4_ep>
 432:	96 1b       	sub	r25, r22

00000434 <__udivmodqi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	7a 95       	dec	r23
 438:	c9 f7       	brne	.-14     	; 0x42c <__udivmodqi4_loop>
 43a:	80 95       	com	r24
 43c:	08 95       	ret

0000043e <itoa>:
 43e:	fb 01       	movw	r30, r22
 440:	9f 01       	movw	r18, r30
 442:	e8 94       	clt
 444:	42 30       	cpi	r20, 0x02	; 2
 446:	c4 f0       	brlt	.+48     	; 0x478 <itoa+0x3a>
 448:	45 32       	cpi	r20, 0x25	; 37
 44a:	b4 f4       	brge	.+44     	; 0x478 <itoa+0x3a>
 44c:	4a 30       	cpi	r20, 0x0A	; 10
 44e:	29 f4       	brne	.+10     	; 0x45a <itoa+0x1c>
 450:	97 fb       	bst	r25, 7
 452:	1e f4       	brtc	.+6      	; 0x45a <itoa+0x1c>
 454:	90 95       	com	r25
 456:	81 95       	neg	r24
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	64 2f       	mov	r22, r20
 45c:	77 27       	eor	r23, r23
 45e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__udivmodhi4>
 462:	80 5d       	subi	r24, 0xD0	; 208
 464:	8a 33       	cpi	r24, 0x3A	; 58
 466:	0c f0       	brlt	.+2      	; 0x46a <itoa+0x2c>
 468:	89 5d       	subi	r24, 0xD9	; 217
 46a:	81 93       	st	Z+, r24
 46c:	cb 01       	movw	r24, r22
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	a1 f7       	brne	.-24     	; 0x45a <itoa+0x1c>
 472:	16 f4       	brtc	.+4      	; 0x478 <itoa+0x3a>
 474:	5d e2       	ldi	r21, 0x2D	; 45
 476:	51 93       	st	Z+, r21
 478:	10 82       	st	Z, r1
 47a:	c9 01       	movw	r24, r18
 47c:	0c 94 40 02 	jmp	0x480	; 0x480 <strrev>

00000480 <strrev>:
 480:	dc 01       	movw	r26, r24
 482:	fc 01       	movw	r30, r24
 484:	67 2f       	mov	r22, r23
 486:	71 91       	ld	r23, Z+
 488:	77 23       	and	r23, r23
 48a:	e1 f7       	brne	.-8      	; 0x484 <strrev+0x4>
 48c:	32 97       	sbiw	r30, 0x02	; 2
 48e:	04 c0       	rjmp	.+8      	; 0x498 <strrev+0x18>
 490:	7c 91       	ld	r23, X
 492:	6d 93       	st	X+, r22
 494:	70 83       	st	Z, r23
 496:	62 91       	ld	r22, -Z
 498:	ae 17       	cp	r26, r30
 49a:	bf 07       	cpc	r27, r31
 49c:	c8 f3       	brcs	.-14     	; 0x490 <strrev+0x10>
 49e:	08 95       	ret

000004a0 <__udivmodhi4>:
 4a0:	aa 1b       	sub	r26, r26
 4a2:	bb 1b       	sub	r27, r27
 4a4:	51 e1       	ldi	r21, 0x11	; 17
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__udivmodhi4_ep>

000004a8 <__udivmodhi4_loop>:
 4a8:	aa 1f       	adc	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	a6 17       	cp	r26, r22
 4ae:	b7 07       	cpc	r27, r23
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__udivmodhi4_ep>
 4b2:	a6 1b       	sub	r26, r22
 4b4:	b7 0b       	sbc	r27, r23

000004b6 <__udivmodhi4_ep>:
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	5a 95       	dec	r21
 4bc:	a9 f7       	brne	.-22     	; 0x4a8 <__udivmodhi4_loop>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
